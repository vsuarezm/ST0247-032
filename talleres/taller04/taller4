import java.util.ArrayList;
import java.util.LinkedList;

/**
 * Clase en la cual se implementan los metodos del Taller 4
 *
 * @author Mauricio Toro, Andres Paez
 */
public class Taller4 {

    /**
     * Metodo auxiliar para llamar el metodo hayCaminoDFS posterior
     *
     * @param g grafo dado
     * @param v vertices
     * @param w vertice
     * @return true si hay camino, false de lo contrario
     */
    public static boolean auxHayCaminoDFS(Digraph g, int v, int w) {
        boolean[] visitados = new boolean[g.size()];
        //return hayCaminoDFS(g, v, w, visitados);
    }

    /**
     * Metodo que recorre el grafo por medio de dfs
     *
     * @param g grafo dado
     * @param v vertices
     * @param w vertice
     * @param visitados ayuda a tener un conteo acerca de que nodos han sido o
     * no visitados
     * @return true si hay camino, false de lo contrario
     */
    private static int hayCaminoDFS(Digraph g, int o, int d, boolean[] visitados) {
        visitados[o] = true;
        int costoMinimo = Integer.MAX_VALUE;
        int costoCamino = 0;
        if (o == d) {
            return costoMinimo;
        } else {
            ArrayList <Integer> hijos = g.getSuccessors(o);
            for (Integer hijo:hijos) {
                if (!visitados[hijo]) {
                    visitados[hijo] = true;
                    int re =costoMinimo(g, hijo,d, visitados);
                    if (re == Integer.MAX_VALUE){
                        costoCamino = re;
                    } else{
                        costoCamino = g.getWeight(o, d) + re;
                    }
                    if (costoCamino < costoMinimo){
                        costoMinimo = costoCamino;
                    }
                }
            }
            return costoMinimo;
        }

    }

    /**
     * Metodo que recorre el grafo por medio de dfs teniendo en cuenta que se
     * quiere encontrar el de menor costo
     *
     * @param g grafo dado
     * @param inicio nodo desde el cual empieza el recorrido
     * @param fin nodo donde termina el recorrido
     * @return cual es el costo que tiene ir desde inicio a fin
     */
    private static int costoMinimo(Digraph g, int o, int d, boolean[] visitados) {
        visitados[o] = true;
        int costoMinimo = Integer.MAX_VALUE;
        int costoCamino = 0;
        if (o == d) {
            return costoMinimo;
        } else {
            ArrayList <Integer> hijos = g.getSuccessors(o);
            for (Integer hijo:hijos) {
                if (!visitados[hijo]) {
                    visitados[hijo] = true;
                    int re =costoMinimo(g, hijo,d, visitados);
                    if (re == Integer.MAX_VALUE){
                        costoCamino = re;
                    } else{
                        costoCamino = g.getWeight(o, d) + re;
                    }
                    if (costoCamino < costoMinimo){
                        costoMinimo = costoCamino;
                    }
                }
            }
            return costoMinimo;
        }

    }

    /**
     * Metodo auxiliar que llama al metodo recorrido posterior con cada uno de
     * los vertices
     *
     * @param g grafo dado
     * @return cual es el costo que tiene
     */
    public static int recorrido(Digraph g) {

    }

    /**
     * Metodo que recorre todo el grafo con la intencion de buscar un camino que
     * represente el menor costo pasando por todos los vertices exactamente una
     * vez y vuelva al nodo inicial
     *
     * @param g grafo dado
     * @param v vertice inicial
     * @param unvisited arreglo de nodos aun no visitados
     * @return cual es el costo que tiene
     */
    private static int recorrido(Digraph g, int v, int[] unvisited) {

    }

    /**
     * Metodo que dada un conjunto de costos en cada arco, encuentra el camino
     * desde el nodo v
     *
     * @param g grafo dado
     * @param v vertice inicial
     * @param coso arreglo de valores que tiene de ir de un nodo a otro
     *
     */
    public static boolean hayCamino(Digraph g, int o, int d) {
        boolean visitados[] = new boolean[g.size()];
        return hayCaminoAux(g, o, d, visitados);
    }

    private static boolean hayCaminoAux(Digraph g, int o, int d, boolean[] visitados) {
        visitados[o] = true;
        if (o == d) {
            return true;
        } else {
            ArrayList<Integer> hijos = g.getSuccessors(o);
            for (Integer hijo : hijos) {
                if (!visitados[hijo] && hayCaminoAux(g, hijo, d, visitados)) {
                    return true;
                }
                return false;
            }
        }
        return true;
    }

}
