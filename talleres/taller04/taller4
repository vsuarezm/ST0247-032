import java.util.ArrayList;
import java.util.LinkedList;

/**
 * Clase en la cual se implementan los metodos del Taller 4
 *
 * @author Mauricio Toro, Andres Paez
 */
public class Taller4 {

    /**
     * Metodo auxiliar para llamar el metodo hayCaminoDFS posterior
     *
     * @param g grafo dado
     * @param v vertices
     * @param w vertice
     * @return true si hay camino, false de lo contrario
     */
     public static int hamiltonWay(Digraph g, int o){
        boolean[] visit = new boolean[g.size()];
        int vertices = 0;
        int[] costo = new int[1];
        costo[0] = Integer.MAX_VALUE;
        int tamaño = 0;
        hamiltonWayAux(g, o, o, visit, costo, tamaño, vertices);
        return costo[0] == Integer.MAX_VALUE ? 0 : costo[o];
    }

    /**
     * Metodo que recorre el grafo por medio de dfs
     *
     * @param g grafo dado
     * @param v vertices
     * @param w vertice
     * @param visitados ayuda a tener un conteo acerca de que nodos han sido o
     * no visitados
     * @return true si hay camino, false de lo contrario
     */
    public static boolean hamiltonWayAux(Digraph g, int o, int d, boolean[] visit,
                                  int[] costo, int tamaño, int vertices){
        
        System.out.println("tamaño: "+ tamaño);
        System.out.println("costo: " + costo[0]);
        System.out.println("vertices: " + vertices);
        System.out.println("g: " + g.size());
        
        if(o == d && g.size() == vertices){
            System.out.println("llegue");
            if(tamaño < costo[0]){
                costo[0] = tamaño;
                System.out.println("llegue222");
            }
            visit[o] = false;
            return true;
        }
                
        visit[o] = true;
        vertices++;
        
        ArrayList<Integer> hijos=g.getSuccessors(o);
        for (Integer hijo:hijos) {
            if((!visit[hijo] && tamaño+g.getWeight(o,hijo)<costo[0])|| (hijo == d && vertices == g.size())){
                tamaño += g.getWeight(o, hijo);
                System.out.println("hijo:" + hijo);
                System.out.println("padre: " + d);
                hamiltonWayAux(g, hijo, d, visit, costo, tamaño, vertices);
            }
        }
        visit[o] = false;
        System.out.println("salí");
        return false;
    }

    /**
     * Metodo que recorre el grafo por medio de dfs teniendo en cuenta que se
     * quiere encontrar el de menor costo
     *
     * @param g grafo dado
     * @param inicio nodo desde el cual empieza el recorrido
     * @param fin nodo donde termina el recorrido
     * @return cual es el costo que tiene ir desde inicio a fin
     */
    private static int costoMinimo(Digraph g, int o, int d, boolean[] visitados) {
        visitados[o] = true;
        int costoMinimo = Integer.MAX_VALUE;
        int costoCamino = 0;
        if (o == d) {
            return costoMinimo;
        } else {
            ArrayList <Integer> hijos = g.getSuccessors(o);
            for (Integer hijo:hijos) {
                if (!visitados[hijo]) {
                    visitados[hijo] = true;
                    int re =costoMinimo(g, hijo,d, visitados);
                    if (re == Integer.MAX_VALUE){
                        costoCamino = re;
                    } else{
                        costoCamino = g.getWeight(o, d) + re;
                    }
                    if (costoCamino < costoMinimo){
                        costoMinimo = costoCamino;
                    }
                }
            }
            return costoMinimo;
        }

    }

    /**
     * Metodo que dada un conjunto de costos en cada arco, encuentra el camino
     * desde el nodo v
     *
     * @param g grafo dado
     * @param v vertice inicial
     * @param coso arreglo de valores que tiene de ir de un nodo a otro
     *
     */
    public static boolean hayCamino(Digraph g, int o, int d) {
        boolean visitados[] = new boolean[g.size()];
        return hayCaminoAux(g, o, d, visitados);
    }

    private static boolean hayCaminoAux(Digraph g, int o, int d, boolean[] visitados) {
        visitados[o] = true;
        if (o == d) {
            return true;
        } else {
            ArrayList<Integer> hijos = g.getSuccessors(o);
            for (Integer hijo : hijos) {
                if (!visitados[hijo] && hayCaminoAux(g, hijo, d, visitados)) {
                    return true;
                }
                return false;
            }
        }
        return true;
    }

}
